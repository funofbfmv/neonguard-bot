const { Telegraf, Markup } = require('telegraf');
const path = require('path');
const fs = require('fs');

const bot = new Telegraf('');

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ —Ñ–∞–π–ª
const logStream = fs.createWriteStream(path.join(__dirname, 'logs.txt'), { flags: 'a' });

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
const tariffs = [
    { 
        name: 'üì±–¢—Ä–∏–Ω–∏—Ç–∏ \n', 
        price: { usd: 5, rub: 400 }, 
        description: '–î–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ 500 –ú–±–∏—Ç/—Å, –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã.',
        image: path.join(__dirname, 'assets', 'triniti.jpg'), 
        emoji: 'üõú'  
    },
    { 
        name: 'üîí–ú–æ—Ä—Ñ–∏—É—Å \n', 
        price: { usd: 9, rub: 720 }, 
        description: '–ü–æ–¥–æ–π–¥–µ—Ç –≥–µ–π–º–µ—Ä–∞–º, —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç 500 –ú–±–∏—Ç/—Å, —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã.',
        image: path.join(__dirname, 'assets', 'morpheus.jpg'), 
        emoji: 'üõú' 
    },
    { 
        name: 'üíä–ù–µ–æ \n', 
        price: { usd: 13, rub: 1040 }, 
        description: '–î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ 800 –ú–±–∏—Ç/—Å, –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã (TCP/UDP), –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã.',
        image: path.join(__dirname, 'assets', 'neo.jpg'), 
        emoji: 'üõú' 
    }
];

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
    .then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'))
    .catch(err => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ', err);
        logStream.write(`${new Date().toISOString()} - –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ${err}\n`);
    });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start((ctx) => {
    const keyboard = Markup.inlineKeyboard([
        Markup.button.callback('–¢–∞—Ä–∏—Ñ—ã', 'show_tariffs'),
        Markup.button.callback('–ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'contact_admin')
    ]);
    return ctx.reply(
    `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å VPN —É—Å–ª—É–≥ NeonGuard!\n
üöÄ –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω—ã–µ OpenVPN —Å–µ—Ä–≤–µ—Ä–∞, –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, —Ç–∞–∫ –∂–µ –º—ã –∏–º–µ–µ–º –±—ã—Å—Ç—Ä—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –≥–µ–π–º–µ—Ä–æ–≤.\n
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        keyboard
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tariffs
bot.command('tariffs', (ctx) => {
    const tariffInfo = tariffs.map(tariff => 
        `${tariff.emoji} –¢–∞—Ä–∏—Ñ: ${tariff.name}\n–¶–µ–Ω–∞: ${tariff.price.usd} USD / ${tariff.price.rub} RUB / –º–µ—Å—è—Ü\n–û–ø–∏—Å–∞–Ω–∏–µ: ${tariff.description}\n`).join('\n');
    const keyboard = Markup.inlineKeyboard(
        tariffs.map(tariff => Markup.button.callback(tariff.name, `tariff_${tariff.name}`))
    );
    ctx.reply(`–¢–∞—Ä–∏—Ñ—ã –Ω–∞ VPN –æ—Ç NeonGuard:\n\n${tariffInfo}`, keyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /contacts
bot.command('contacts', (ctx) => {
    const contactInfo = `
–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º:
- Telegram: @neonguard_vpn
`;
    ctx.reply(contactInfo);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about
bot.command('about', (ctx) => {
    const aboutInfo = `
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å:
- WebSite: neonguard.tech

`;
    ctx.reply(aboutInfo);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /soft
bot.command('soft', (ctx) => {
    const softInfo = `
–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ OpenVPN —Å–æ—Ñ—Ç–∞:

- üì± [iPhone](https://apps.apple.com/app/id590379981)
- ü§ñ [Android](https://play.google.com/store/apps/details?id=net.openvpn.openvpn)
- üíª [Windows](https://openvpn.net/client-connect-vpn-for-windows/)
- üçè [Mac](https://openvpn.net/client-connect-vpn-for-mac-os/)
- üêß [Linux](https://openvpn.net/community-downloads/)
    `;
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.url('üì± iPhone', 'https://apps.apple.com/app/id590379981')],
        [Markup.button.url('ü§ñ Android', 'https://play.google.com/store/apps/details?id=net.openvpn.openvpn')],
        [Markup.button.url('üíª Windows', 'https://openvpn.net/client-connect-vpn-for-windows/')],
        [Markup.button.url('üçè Mac', 'https://openvpn.net/client-connect-vpn-for-mac-os/')],
        [Markup.button.url('üêß Linux', 'https://openvpn.net/community-downloads/')]
    ]);
    ctx.replyWithMarkdown(softInfo, keyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã"
bot.action('show_tariffs', (ctx) => {
    const tariffInfo = tariffs.map(tariff => 
        `${tariff.emoji} –¢–∞—Ä–∏—Ñ: ${tariff.name}\n–¶–µ–Ω–∞: ${tariff.price.usd} USD / ${tariff.price.rub} RUB / –º–µ—Å—è—Ü\n–û–ø–∏—Å–∞–Ω–∏–µ: ${tariff.description}\n`).join('\n');
    const keyboard = Markup.inlineKeyboard(
        tariffs.map(tariff => Markup.button.callback(tariff.name, `tariff_${tariff.name}`))
    );
    ctx.editMessageText(`–¢–∞—Ä–∏—Ñ—ã –Ω–∞ VPN —É—Å–ª—É–≥–∏:\n\n${tariffInfo}`, keyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è "–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º"
bot.action('contact_admin', (ctx) => {
    const contactInfo = `
–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º:
- Telegram: @neonguard_vpn
`;
    ctx.editMessageText(contactInfo);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
tariffs.forEach(tariff => {
    bot.action(`tariff_${tariff.name}`, async (ctx) => {
        const userId = ctx.from.id;
        const username = ctx.from.username || 'unknown';
        const paymentId = `${userId}-${Date.now()}`; // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–ª–∞—Ç–µ–∂–∞

        await ctx.answerCbQuery(`–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ ${tariff.name}`);
        await ctx.replyWithPhoto({ source: tariff.image }, {
            caption: `${tariff.emoji} –¢–∞—Ä–∏—Ñ ${tariff.name}\n–¶–µ–Ω–∞: ${tariff.price.usd} USD / ${tariff.price.rub} RUB –≤ –º–µ—Å—è—Ü\n–û–ø–∏—Å–∞–Ω–∏–µ: ${tariff.description}`
        });

        const paymentKeyboard = Markup.inlineKeyboard([
            Markup.button.callback('‚Çø Binance Pay', `payment_crypto_${tariff.name}_${paymentId}`),
            Markup.button.callback('üí≥–Æmoney', `payment_service_${tariff.name}_${paymentId}`),
            Markup.button.callback('üíé USDT', `payment_usdt_${tariff.name}_${paymentId}`)
        ]);

        await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ ${tariff.name}`, paymentKeyboard);

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
        logStream.write(`${new Date().toISOString()} - User ${userId} (username: ${username}) –≤—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ ${tariff.name}\n`);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    bot.action(new RegExp(`payment_crypto_${tariff.name}_(.+)`), async (ctx) => {
        const match = ctx.match[1];
        const paymentId = match;

        await ctx.answerCbQuery(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Binance Pay –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ ${tariff.name}`);
        await ctx.reply(`–û–ø–ª–∞—Ç–∏—Ç–µ ${tariff.price.usd} USDT –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É QR-–∫–æ–¥—É —á–µ—Ä–µ–∑ Binance Pay:`);
        const qrCodePath = path.join(__dirname, 'assets', 'binance_qr_code.jpg');
        await ctx.replyWithPhoto({ source: qrCodePath });
        await ctx.reply(`–ü–æ—Å–ª–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @neonguard_vpn –∏ –ø–æ–∫–∞–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å —á–µ–∫–æ–º.`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
        logStream.write(`${new Date().toISOString()} - User ${ctx.from.id} (username: ${ctx.from.username || 'unknown'}) –≤—ã–±—Ä–∞–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ ${tariff.name} —Å paymentId ${paymentId}\n`);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–±–æ—Ä–∞ –ÆMoney –¥–ª—è –æ–ø–ª–∞—Ç—ã
    bot.action(new RegExp(`payment_service_${tariff.name}_(.+)`), async (ctx) => {
        const match = ctx.match[1];
        const paymentId = match;

        await ctx.answerCbQuery(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Æmoney –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ ${tariff.name}`);

        // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –ÆMoney
        const yoomoneyPaymentLink = 'https://yoomoney.ru/to/410017430555677';

        // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å –ÆMoney" –∫–∞–∫ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        const keyboard = Markup.inlineKeyboard([
            Markup.button.url('–û—Ç–∫—Ä—ã—Ç—å –ÆMoney', yoomoneyPaymentLink)
        ]);

        await ctx.reply(`–û–ø–ª–∞—Ç–∏—Ç–µ ${tariff.price.rub} RUB –ø–æ —Å—Å—ã–ª–∫–µ: ${yoomoneyPaymentLink}`, keyboard);
        await ctx.reply(`–ü–æ—Å–ª–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @neonguard_vpn –∏ –ø–æ–∫–∞–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å —á–µ–∫–æ–º.`);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
        logStream.write(`${new Date().toISOString()} - User ${ctx.from.id} (username: ${ctx.from.username || 'unknown'}) –≤—ã–±—Ä–∞–ª –ø–ª–∞—Ç–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ ${tariff.name} —Å paymentId ${paymentId}\n`);
    });

    bot.action(new RegExp(`payment_usdt_${tariff.name}_(.+)`), async (ctx) => {
        const match = ctx.match[1];
        const paymentId = match;
    
        await ctx.answerCbQuery(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ USDT –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ ${tariff.name}`);
        await ctx.replyWithMarkdown(
            `–û–ø–ª–∞—Ç–∏—Ç–µ ${tariff.price.usd} USDT –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–¥—Ä–µ—Å:\n\`TZAMmgLMqDQF1QaVijqJpD2LgXmPuJzmom\`\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å —Ç–∞–ø–Ω—É–≤ –Ω–∞ –Ω–µ–≥–æ \n –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å TRC-20 –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.`
        );
        await ctx.reply(`–ü–æ—Å–ª–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @neonguard_vpn –∏ –ø–æ–∫–∞–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å —á–µ–∫–æ–º.`);
    
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
        logStream.write(`${new Date().toISOString()} - User ${ctx.from.id} (username: ${ctx.from.username || 'unknown'}) –≤—ã–±—Ä–∞–ª USDT –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ ${tariff.name} —Å paymentId ${paymentId}\n`);
    });
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    const username = ctx.from ? (ctx.from.username || 'unknown') : 'unknown';
    const userId = ctx.from ? ctx.from.id : 'unknown';
    console.error(`–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.updateType}`, err);
    logStream.write(`${new Date().toISOString()} - –û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (username: ${username}): ${err}\n`);
});